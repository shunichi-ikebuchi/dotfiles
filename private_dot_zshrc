# Environment variables settings
export GOPATH="$HOME"
export PATH="$PATH:$HOME/bin:$HOME/.local/bin"
export EDITOR="vim"
export LANG="en_US.UTF-8"
export GPG_TTY="$(tty)"
export GHQ_ROOT="$HOME/src"

# Jenkins
export JAVA_HOME="$(/usr/libexec/java_home -v '17')"
export PATH="$JAVA_HOME/bin:$PATH"
export JENKINS_HOME="$HOME/.jenkins"

# Pico
export PICO_SDK_PATH="$HOME/src/pico-sdk"

# Python Settings
export PYENV_ROOT="$HOME/.pyenv"
[[ -d "$PYENV_ROOT/bin" ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"


# Key bind
bindkey -e

# Command completion
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select # Enable menu-style completion (selectable with Tab)
bindkey '^[[Z' autosuggest-accept

# gwq auto-completion (for Zsh)
source <(gwq completion zsh)

# Aliases (unified to double quotes for consistency)
alias vi="nvim"
alias c="claude"
alias cr="claude -r"
alias ls="ls -G"  # Colored ls on macOS (use --color=auto on Linux)
alias ll="ls -lh" # Detailed list, human-readable sizes
alias la="ls -A"  # Show hidden files
alias mv="mv -i"  # Confirm before overwriting
alias tac="gtac"
alias gg="ghq get -p"
alias chz="chezmoi"
alias mc="open -a \"Mission Control\""
alias launchpad="open -a \"Launchpad\""
alias reset-launchpad='sudo find 2>/dev/null /private/var/folders/ -type d -name com.apple.dock.launchpad -exec rm -rf {} +; killall Dock'

# Safe delete: Always move to trash (use \rm or command rm for permanent deletion)
function rm() {
	local trash="$HOME/.Trash"
	local timestamp=$(date +%Y%m%d_%H%M%S)
	local recursive=false
	local items=()

	# Parse arguments
	for arg in "$@"; do
		if [[ "$arg" == "-r" || "$arg" == "-R" ]]; then
			recursive=true
		elif [[ "$arg" =~ ^-.*[rR].*$ ]]; then
			# Handle combined options like -rf
			recursive=true
		elif [[ "$arg" != -* ]]; then
			items+=("$arg")
		fi
	done

	# Move items to trash
	if [ ${#items[@]} -eq 0 ]; then
		echo "rm: missing operand"
		echo "Tip: Use 'command rm' or '\\rm' for permanent deletion"
		return 1
	fi

	for item in "${items[@]}"; do
		if [ -e "$item" ]; then
			# Safety check for important directories
			if [ -d "$item" ]; then
				if [ -d "$item/.git" ]; then
					echo "‚ö†Ô∏è  Warning: '$item' contains .git directory"
				fi
				if [ "$item" = "node_modules" ] || [ "$item" = "vendor" ]; then
					echo "üí° Info: Large dependency directory detected: $item"
				fi
			fi

			local basename=$(basename "$item")
			local dest="$trash/${basename}_${timestamp}"

			# Check if destination already exists
			if [ -e "$dest" ]; then
				dest="${dest}_${RANDOM}"
			fi

			mv "$item" "$dest"
			echo "üóëÔ∏è  Moved to trash: $item ‚Üí $(basename "$dest")"
		else
			echo "rm: $item: No such file or directory"
		fi
	done
}

# Trash management commands
alias trash='ls -lhtr ~/.Trash | tail -20'           # Show recent 20 items
alias trash-list='ls -lhtr ~/.Trash'                 # Show all items
alias trash-clean='command rm -rf ~/.Trash/*'        # Empty trash
alias trash-restore='echo "Move file back from ~/.Trash manually"'  # Restore hint

# History settings
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=100000
setopt share_history
setopt append_history
setopt inc_append_history
setopt hist_ignore_all_dups # Do not save duplicate commands in history
setopt hist_ignore_space    # Do not save commands starting with space in history (for secret commands)
setopt hist_reduce_blanks   # Remove extra spaces to compact history

# History search with fzf
function fzf-history-selection() {
	BUFFER="$(history -n 1 | tac | awk '!a[$0]++' | fzf --query "$LBUFFER" --layout=reverse)"
	CURSOR="$#BUFFER"
	zle reset-prompt
}
zle -N fzf-history-selection
bindkey '^R' fzf-history-selection

# Project directory search and navigation with fzf
function fzf-src() {
	local selected_dir="$(ghq list -p | fzf --query "$LBUFFER" --layout=reverse)"
	if [ -n "$selected_dir" ]; then
		BUFFER="cd ${selected_dir}"
		zle accept-line
	fi
	zle clear-screen
}
zle -N fzf-src
bindkey '^G' fzf-src

# Directory navigation enhancements
setopt auto_cd           # Change directory by just typing the directory name
setopt auto_pushd        # Automatically add to directory stack on cd (can return with popd)
setopt pushd_ignore_dups # Do not add duplicates to the stack

# Prompt enhancements
setopt prompt_subst # Allow variable and command expansion in prompt
autoload -Uz vcs_info
zstyle ':vcs_info:git:*' formats '%b'
zstyle ':vcs_info:*' enable git
precmd() {
	vcs_info
	print -Pn "\e]2;%-3~\a" # Set terminal title to current directory
	PS1="%F{green}>%f "
	RPROMPT=$'%{\033[32m%}${vcs_info_msg_0_}${vcs_info_msg_0_:+ @ }%2~%{\033[0m%}'
}

# Enable direnv
eval "$(direnv hook zsh)"

# Google Cloud SDK settings
export PATH="$PATH:$HOME/google-cloud-sdk/bin"
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# Sleep control (macOS)
alias sleepon='sudo pmset -a disablesleep 0'
alias sleepoff='sudo pmset -a disablesleep 1'

# Android SDK
export ANDROID_HOME="$HOME/Library/Android/sdk"
export PATH="$PATH:$ANDROID_HOME/emulator"
export PATH="$PATH:$ANDROID_HOME/platform-tools"

# Plugins (install once, then source; add checks to avoid re-cloning)
if [ ! -d "$HOME/.zsh/zsh-autosuggestions" ]; then
	git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME/.zsh/zsh-autosuggestions"
fi
source "$HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"

# mise
eval "$(/opt/homebrew/bin/mise activate zsh)"

# wcc
[ -f "$HOME/.config/shell/wcc.sh" ] && . "$HOME/.config/shell/wcc.sh"

# wct - Worktree + Claude + Tmux
# Usage: wct feat/branch-name
wct() {
    local branch=$1
    local session_name=$(echo $branch | tr '/' '-' | sed 's/feat-//')
    
    # worktree„Å´ÁßªÂãï
    cd $(gwq get $branch) || return 1
    
    # tmux„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if ! tmux has-session -t $session_name 2>/dev/null; then
        # Êñ∞Ë¶è„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
        tmux new-session -d -s $session_name -c $(pwd)
    fi
    
    # „Çª„ÉÉ„Ç∑„Éß„É≥„Å´„Ç¢„Çø„ÉÉ„ÉÅ
    tmux attach-session -t $session_name
}

# Must: Place at the very end
if [ ! -d "$HOME/.zsh/zsh-syntax-highlighting" ]; then
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.zsh/zsh-syntax-highlighting"
fi
source "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# Load environment-specific configuration (not managed by chezmoi)
[ -f "$HOME/.zshrc.local" ] && source "$HOME/.zshrc.local"
